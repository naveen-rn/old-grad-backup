-module(fibonacci).
-compile(export_all).

fibCalcRecursive(Position) 
	when Position =< 0 ->[];
fibCalcRecursive(1) -> [1];
fibCalcRecursive(2) -> [1,1];
fibCalcRecursive(Position) ->
    List = fibCalcRecursive(Position-1),
    List ++ [lists:nth(length(List), List) + lists:nth(length(List) -1, List)]. 	

first([H|_]) -> H.
second([_,H|_]) -> H.

fibCalcImmutable(Position) ->
   List = createList(Position),
   lists:foldl(
	fun(_, Accum) ->  
		if (length(Accum) < 2) ->
			[1] ++ Accum;
		true ->
		   Accum ++ [lists:nth(length(Accum), Accum) + lists:nth(length(Accum)-1, Accum)]
		end
	end, [], List).

createList(Position)
	when Position =< 0 ->[];
createList(Position) -> [1] ++ createList(Position-1).

printTests() ->
	io:format("Recursive ~n"),
	io:format("-1 : ~p~n", [fibCalcRecursive(-1)]),
	io:format("0 : ~p~n", [fibCalcRecursive(0)]),
	io:format("1 : ~p~n", [fibCalcRecursive(1)]),
	io:format("2 : ~p~n", [fibCalcRecursive(2)]),
	io:format("4 : ~p~n", [fibCalcRecursive(4)]),
	io:format("6 : ~p~n", [fibCalcRecursive(6)]),
	io:format("~nImmutable ~n"),
	io:format("-1 : ~p~n", [fibCalcImmutable(-1)]),
	io:format("0 : ~p~n", [fibCalcImmutable(0)]),
	io:format("1 : ~p~n", [fibCalcImmutable(1)]),
	io:format("2 : ~p~n", [fibCalcImmutable(2)]),
	io:format("4 : ~p~n", [fibCalcImmutable(4)]),
	io:format("6 : ~p~n", [fibCalcImmutable(6)]).
