Assign4: Due 11:59PM May 2nd

A company is in the business of buying rods in wholesale, cutting it, and
selling the pieces in the retain market. The market fluctuates and the price 
for different sizes of rods changes by the day. Here's where we come in, the
company wants our help to know how much maximum money they can make, and how 
to cut the rods of a given length to get that maximum money.

For example, if the rods of various lengths sell at the following prices on
a given day:

Inch   price
1       $1
2       $1
3       $2
4       $3
5       $4
6       $5
7       $5
8       $9
9       $9
10      $10

Cutting a 20 inches rod into pieces of 2 inches each will only get them 
$10. However, if they cut it into 6 pieces of two 8-inches, and four 1-inches
will get them $22. There may be other combinations that produce better price.
The additional challenge is the prices fluctuate each day.

We're asked to write a program, but in a way the algorithm for computing
the sizes can be changed.

Write a class RodCutter that will take the various lengths and their prices.
Then write one method on the class, cutRod that takes a length as parameter
and returns two things - maximum price the company can expect and the
size of the rods that they should cut the given length to get that price.
For example, if the input parameter is 2 (and the prices are as above),
then the output will be $2 and the sizes will be 1, 1 (for 2 pieces).

First write the class RodCutter so it works with a simple algorithm.
Then (and only after fully completing the above, not before), create another
version of RodCutter that will use techniques to shorten the
time to compute the result. The two versions must produce the same result,
just their computations efficiencies must be different.

After you complete the program, answer the following questions:

1. What design principles did you use in this program. Explain each
and specify the classes that participated.

DIP:
RodCutterMemoTest depends upon class RodCutterTest, which extends through the method createRodCutter.

SRP:
RodCutter and RodCutterMemo methods does one thing and just one thing only, they are calculating the highest price that can be obtained for a given piece of rod length.

DRY:
We used most of the code in RodCutter by overriding cutRod method in the derived class RodCutterMemo.
We also made use of the same test cases to test both the RodCutter and the RodCutterMemo.

OCP:
Addition of new classes will not necessitate any change in the code of the existing classes.

2. What design patterns did you use in this program. Explain each
and specify the classes that participated.

We made use of the Factory Method Pattern and Strategy Pattern.

Factory Method Pattern:

RodCutterTest and RodCutterMemoTest are the classes created, where the former defines an interface and the later is the subclass, which donot create any new object until runtime. Usually in factory method we define an interface for creating objects, but here we made use of a base class RodCutterTest whose createRodCutter method was overridden by the method in the subclass for creating the object.

Strategy Pattern:

RodCutter and RodCutterMemo forms the family of algorithm to calculate the maxRodPrice. The test classes of the RodCutter and RodCutterMemo calls them interchangebly. In the strategy pattern we have an abstract base class that is being implemented by the derived class. Here, we have a concrete base class which is being extended by the derived class, where the cutRod method is overridden to form a new algorithm for calculating the maxRodPrice.

Total[100]: 95 [Sorry to hear about your family/health issues. However, you need to inform me before the assignment is due (as soon as you quit participating that is). That way we could arrange for alternate schedule, etc. Not participating and not informing me is not acceptable.]

All tests pass [20]:
Coverage [10]:
Design quality [20]:
Code quality [20]:
Principles used [10]:
Patterns used [10]: -3
Iterator pattern

Implementation correctness [10]: -2
Since the object is stateless, the dictionary can't ignore the prices and only store the length as key.
