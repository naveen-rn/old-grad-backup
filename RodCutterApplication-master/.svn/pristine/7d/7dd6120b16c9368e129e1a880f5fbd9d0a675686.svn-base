apply plugin: "java"
 
def cloverConvention = new CloverPluginConvention(project)
project.convention.plugins.clover = cloverConvention
 
class CloverPluginConvention {
    def instrSrcDir
    def classesBackupDir
    def licenseFile
 
    def clover(Closure close) {
        close.delegate = this
        close.run()
    }
 
    // historyDir is set to a location outside of buildDir so that the clean task does not remove it.
    CloverPluginConvention(Project project) {
        instrSrcDir = "${project.buildDir}/instrSrc"
        classesBackupDir = "${project.sourceSets.main.output.classesDir}-bak"
        licenseFile = "clover.license"
    }
}
 
dependencies {
    testRuntime "com.cenqua.clover:clover:3.2.2"
}
 
test.doFirst {
  ant.taskdef(resource:"cloverlib.xml", classpath:configurations.testRuntime.asPath)
  ant.property(name:"clover.license.path", value:cloverConvention.licenseFile)
  
  ant."clover-clean"()
  
  //instrument the source
  new File(cloverConvention.instrSrcDir).mkdirs()
  sourceSets.main.java.srcDirs.each {
      if (it.exists()) {
          ant."clover-instr"(srcdir:it, destdir:cloverConvention.instrSrcDir)
      }
  }
  
  //move original classes
  ant.move(file:project.sourceSets.main.output.classesDir, tofile:cloverConvention.classesBackupDir)
  
  //compile instrumented classes
  project.sourceSets.main.output.classesDir.mkdirs()
  ant.javac(
          srcdir:cloverConvention.instrSrcDir,
          destdir:project.sourceSets.main.output.classesDir,
          source:sourceCompatibility,
          target: targetCompatibility,
          includeAntRuntime: false) {
      classpath {
          pathElement path:configurations.testRuntime.asPath
      }
  }
  
  //copy resources
  ant.copy(todir:project.sourceSets.main.output.classesDir) {
      fileset(dir:cloverConvention.classesBackupDir, excludes:"**/*.class")
  }
  
}
 
test.doLast {
    // If you want to ratchet up coverage, add a -PhistoryThreshold=5 to ensure that coverage doesn't decrease by 5%
    if (project.hasProperty("historyThreshold") && project.getProperty("historyThreshold").isInteger()) {
        println "History Threshold being set to ${project.getProperty('historyThreshold')}%"
        ant."clover-check" (threshold:"${project.getProperty('historyThreshold')}%",historydir:cloverConvention.historyDir)
        ant."clover-historypoint"(historydir:cloverConvention.historyDir);
    }
    
    // restore original classes
    ant.delete(file: project.sourceSets.main.output.classesDir)
    ant.move(file:cloverConvention.classesBackupDir, tofile:project.sourceSets.main.output.classesDir)
    
    ant."clover-report" {
        current(outfile:"${reportsDir}/clover/clover.xml")
    }
    ant."clover-html-report"(outdir:"${reportsDir}/clover/html");
    
}